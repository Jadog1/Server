<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title></title>
    <%- include('../../partials/Header') %>
</head>
<body>
    <%- include('../../partials/navbar') %>
    <style>
        @import "https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700";


        body {
            font-family: 'Poppins', sans-serif;
            background: #fafafa;
        }

        p {
            font-family: 'Poppins', sans-serif;
            font-size: 1.1em;
            font-weight: 300;
            line-height: 1.7em;
            color: #999;
        }

        a, a:hover, a:focus {
            color: inherit;
            text-decoration: none;
            transition: all 0.3s;
        }

        #sidebar {
            min-width: 250px;
            max-width: 250px;
            min-height: 95vh;
            background: #7386D5;
            color: #fff;
            transition: all 0.3s;
        }

            #sidebar .sidebar-header {
                padding: 20px;
                background: #6d7fcc;
            }

            #sidebar ul.components {
                padding: 20px 0;
                border-bottom: 1px solid #47748b;
            }

            #sidebar ul p {
                color: #fff;
                padding: 10px;
            }

            #sidebar ul li a {
                padding: 10px;
                font-size: 1.1em;
                display: block;
            }

                #sidebar ul li a:hover {
                    color: #7386D5;
                    background: #fff;
                }

            #sidebar ul li.active > a, a[aria-expanded="true"] {
                color: #fff;
                background: #6d7fcc;
            }

        ul ul a {
            font-size: 0.9em !important;
            padding-left: 30px !important;
            background: #6d7fcc;
        }

        @media (max-width: 768px) {
            #sidebar {
                margin-left: -250px;
            }

                #sidebar.active {
                    margin-left: 0;
                }
        }

        a[data-toggle="collapse"] {
            position: relative;
        }

        .dropdown-toggle::after {
            display: block;
            position: absolute;
            top: 50%;
            right: 20px;
            transform: translateY(-50%);
        }

        .wrapper {
            display: flex;
            width: 100%;
            align-items: stretch;
        }
    </style>
    <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

    <div class="w3-row-padding w3-padding-64 w3-container">
        <div class="wrapper">
            <!-- Sidebar  -->
            <nav id="sidebar" class="">
                <div class="sidebar-header">
                    <h3>Jadon Steinmetz</h3>
                </div>

                <ul class="list-unstyled components">
                    <p>Budget starter</p>
                    <li class="active">
                        <a href="#budgetSubMenu" data-toggle="collapse" aria-expanded="false" class="dropdown-toggle collapsed">Budgets</a>
                        <ul class="list-unstyled collapse" id="budgetSubMenu" style="">
                        </ul>
                    </li>
                    <li>
                        <a href="#">About</a>
                    </li>
                    <li>
                        <a href="#pageSubmenu" data-toggle="collapse" aria-expanded="false" class="dropdown-toggle collapsed">Pages</a>
                        <ul class="list-unstyled collapse" id="pageSubmenu" style="">
                            <li>
                                <a href="#">Page 1</a>
                            </li>
                            <li>
                                <a href="#">Page 2</a>
                            </li>
                            <li>
                                <a href="#">Page 3</a>
                            </li>
                        </ul>
                    </li>
                    <li>
                        <a href="#">Portfolio</a>
                    </li>
                    <li>
                        <a href="/finance/logout" class="btn btn-info btn-lg" id="logout"><i class="fa fa-sign-out"></i>Log out</a>
                    </li>
                </ul>
            </nav>

            <!-- Page Content  -->
            <div id="content">

                <h2>Budgets</h2>
                <div id="expenses"></div>
            </div>
        </div>
    </div>


    <script type="text/babel">
        'use strict';

const eventBus = {
    on(event, callback) {
        document.addEventListener(event, (e) => callback(e.detail));
    },
    dispatch(event, data) {
        document.dispatchEvent(new CustomEvent(event, { detail: data }));
    },
    remove(event, callback) {
        document.removeEventListener(event, callback);
    },
};
        
function updateExpenseList(budgetId) {
        fetch("/finance/expense-list?budgetId=" + budgetId)
            .then(res => res.json())
            .then(
                (result) => {
                    eventBus.dispatch("expense", { message: result, budget: budgetId });
                },
                // Note: it's important to handle errors here
                // instead of a catch() block so that we don't swallow
                // exceptions from actual bugs in components.
                (error) => {
                    alert(error);
                }
            )
}

class ExpenseForm extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            amount: null,
            expenseName: null,
            budgetId: null
        }
    }
    submitForm() {
        const amount = this.state.amount;
        const expenseName = this.state.expenseName;
        const budgetId = this.props.budgetId;
        var data = {
                amount: amount, 
                expenseName: expenseName, 
                budgetId: budgetId
            }
        fetch("/finance/addExpense", {
            method: 'POST',
             headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(res => res.json())
            .then(
                (result) => {
                    updateExpenseList(this.props.budgetId);
                },
                (error) => {
                    alert(error);
                }
            )
    }

    handleChangeAmount(event) {
        this.setState({amount: event.target.value});
    }
    handleChangeName(event) {
        this.setState({expenseName: event.target.value});
    }
    render() {
        return (
            <div>
                <label htmlFor="amount">Expected amount:</label>
                <input type="number" name="amount" id="amount" onChange={this.handleChangeAmount.bind(this)}/><br />
                <label htmlFor="expenseName">Name of expense:</label>
                <input type="text" name="expenseName" id="expenseName" onChange={this.handleChangeName.bind(this)}/><br />
                <label htmlFor="budgetId">Budget ID:</label>
                <input type="text" name="budgetId" id="budgetId" readOnly value={this.props.budgetId} /><br />
                <input type="submit" value="Submit" id="registerSubmit" onClick={() => this.submitForm()} />
            </div>
        );
    }
}

class Expense extends React.Component {
    constructor(props) {
        super(props);
    }

    render() {
        return (
            <span>
                {this.props.data.expense_name} - {this.props.data.amount} - {this.props.data.expense_id}
            </span>
        );
    }
}

class ExpenseList extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            message: [],
            budget: null,
            showAddExpense: false
        }
    }

    handleToggle() {
        if (this.state.showAddExpense)
            this.setState({ showAddExpense: false });
        else
            this.setState({ showAddExpense: true });
    }

    componentDidMount() {
        eventBus.on("expense", (data) =>
            this.setState({ message: data.message, budget: data.budget })
        );
    }

    componentWillUnmount() {
        eventBus.remove("expense");
    }


    render() {
        return <div>
            <div>
                {this.state.budget != null ?
                    <button onClick={() => this.handleToggle()}>Toggle Expense adding</button>
                    : null}
                {this.state.showAddExpense ?
                    <ExpenseForm budgetId={this.state.budget} /> :
                    null
                }
            </div>
            {this.state.message.map((expense, index) => (
                <div key={index}>
                    <Expense data={expense} />
                </div>
            ))}
        </div>;
    }
}

class Budget extends React.Component {
    constructor(props) {
        super(props);
    }

    handleNewReleaseClick(newRelease) {
        updateExpenseList(newRelease);
    }

    render() {
        return (
            <a onClick={() => this.handleNewReleaseClick(this.props.data.account_id)}>
                {this.props.data.account_name}
            </a>
        );
    }
}

class BudgetList extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            budgetArr: JSON.parse('<%- budget %>')
        };
    }


    render() {
        return (
            < span >
                {this.state.budgetArr.map((budget, index) => (
                    <li key={index}>
                        <Budget data={budget} />
                    </li>
                ))}
            </span>
        );
    }
}

const domContainer = document.querySelector('#budgetSubMenu');
ReactDOM.render(<BudgetList />, domContainer);
const expenseContainer = document.querySelector('#expenses');
ReactDOM.render(<ExpenseList />, expenseContainer);
    </script>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
</body>
</html>
