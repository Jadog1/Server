<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>Distance calculator</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <%- include('../partials/Header') %>
</head>
<body>

    <!-- Navbar -->
    <%- include('../partials/navbar') %>
    <style>
        #optionPane {
            width: 100%;
            height: 100px;
            background-color: #eee;
        }

        input[type="radio"],
        label {
            cursor: pointer;
        }

        textarea {
            display: inline-block;
            margin-right: 20px;
        }

        #help {
            display: inline-block;
            float: right;
            cursor: pointer;
        }
    </style>

    <div class="w3-row-padding w3-padding-64 w3-container">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
        <div id="optionPane">
            <div id="help" onclick="displayHelp()">
                <i class="fa fa-question-circle">Help</i>
            </div>
            <input id="efficient" type="radio" name="sort" checked="checked" onclick="calculation = 0; chooseCalc()" />
            <label for="efficient">Sort by shipping efficiency</label><br />
            <input id="fair" type="radio" name="sort" onclick="calculation = 1; chooseCalc()" />
            <label for="fair">Sort by fairness -- This is based off TRUE fairness. You can compare the weights post-computation to see the changes</label>
        </div>

        <textarea placeholder="Insert addresses here" rows="20" cols="40" id="input"></textarea>
        <textarea readonly rows="20" cols="40" id="output" placeholder="output"></textarea>
        <br />
        <button onclick="chooseCalc()">
            Calculate
        </button>
        FTW: <span id="ftw">0</span>
        OMA: <span id="oma">0</span>
        GSO: <span id="gso">0</span>
        <button onclick="clearVals()">
            Clear
        </button> 
        <span id="totalShipping"></span>
        <br />
        <h1>Goal of efficiency</h1>
        <p>
            The new algorithm now factors depot calculations in two categories, one purely by how efficient it is to ship something, and the other method splits the workload evenly among all depot locations in the most efficient way possible, and quickest way of shipping possible.
        </p>
    </div>


    <script>
        var cachedDistances;
        var cachedStateLocations = [];
        //Find the current state depots, which is kept up to date on a JSON file
        $(document).ready(function () {
            $.get("/currentDepots", function (data) {
                cachedDistances = data;
                //The below loop is to quickly find the states by using an "associate" array
                for (var i = 0; i < data[0].distances.length; i++) {
                    cachedStateLocations[data[0].distances[i].name] = i;
                }
            });
        });
        function depotObj(name, state) {
            this.name = name;
            this.state = state;
            this.assigned = 0;
        }
        var depotList = [new depotObj("FTW", "IN"), new depotObj("OMA", "NE"), new depotObj("GSO", "NC")]

        function clearVals() {
            for (i = 0; i < depotList.length; i++) depotList[i].assigned = 0;
            document.getElementById("output").innerHTML = "";
            document.getElementById("input").value = "";
            document.getElementById("ftw").innerHTML = depotList[0].assigned;
            document.getElementById("oma").innerHTML = depotList[1].assigned;
            document.getElementById("gso").innerHTML = depotList[2].assigned;
        }

        var calculation = 0;
        function chooseCalc() {
            for (i = 0; i < depotList.length; i++) depotList[i].assigned = 0;
            document.getElementById("output").innerHTML = "";

            if (calculation == 0) {
                calculateDistanceEfficient();
            } else calculateDistanceFair();
        }

        function calculateDistanceEfficient() {
            document.getElementById("output").innerHTML = "";
            //Split the list and set the arrays
            var list = document.getElementById("input").value;
            var totalWeight = 0;
            list = list.trim();
            if (list  == "")
                return;
            list = list.split("\n");
           
            for (var i = 0; i < list.length; i++) {
                //Logic for handling reading full addresses and state abbreviations
                var chosenState = list[i];
                var splitChosenState = list[i].split(" ");
                if (splitChosenState.length > 1)
                    chosenState = splitChosenState[splitChosenState.length - 2];
                chosenState = chosenState.toUpperCase();
                chosenState = chosenState.substring(0, 2);

                var stateInArray = cachedStateLocations[chosenState];
                if (stateInArray == undefined) {
                    document.getElementById("output").innerHTML = ("Unrecognized state: " + chosenState);
                    return;
                }

                var min = Number.MAX_SAFE_INTEGER;
                var chosenDepot;
                //Find the most efficient depot
                for (var searchDepots = 0; searchDepots < cachedDistances.length; searchDepots++) {
                    var weight = cachedDistances[searchDepots].distances[stateInArray].weight;
                    if (weight < min) {
                        min = weight;
                        chosenDepot = cachedDistances[searchDepots].name
                    }
                }
                totalWeight += min;
                var depotName;
                //Assign out the count to the most efficient depot
                for (var j = 0; j < depotList.length; j++) {
                    if (depotList[j].state == chosenDepot) {
                        depotList[j].assigned++;
                        depotName = depotList[j].name;
                        break;
                    }
                }

                document.getElementById("output").innerHTML += depotName + "\n";
            }

            const factor = 0.621371;
            document.getElementById("totalShipping").innerHTML = "Approximated shipping mileage (in miles): " + ((totalWeight * factor).toFixed(0)) + "mi";
            document.getElementById("ftw").innerHTML = depotList[0].assigned;
            document.getElementById("oma").innerHTML = depotList[1].assigned;
            document.getElementById("gso").innerHTML = depotList[2].assigned;
        }


        function fairObj(state, allWeights, id) {
            this.name; //Newest location
            this.weight = allWeights;
            this.chosenDepotArrayLoc;
            this.stateInArray = state; //Actual state index
            this.uniqueId = id; //Set id
        }

        function calculateDistanceFair() {
            document.getElementById("output").innerHTML = "";
            //Split the list and set the arrays
            var list = document.getElementById("input").value;
            var totalWeight = 0;
            var availableDepots = [],
                depotSelectionHolder = [],
                originalDepotList = [];
            for (var i = 0; i < cachedDistances.length; i++) {
                availableDepots.push(cachedDistances[i].name);
                depotSelectionHolder.push([]);
            }
            list = list.trim();
            list = list.split("\n");
            if (list.length <= 3) {
                calculateDistanceEfficient();
                return;
            }

            for (var i = 0; i < list.length; i++) {
                //Logic for handling reading full addresses and state abbreviations
                var chosenState = list[i];
                var splitChosenState = list[i].split(" ");
                if (splitChosenState.length > 1)
                    chosenState = splitChosenState[splitChosenState.length - 2];
                chosenState = chosenState.toUpperCase();
                chosenState = chosenState.substring(0, 2);

                var stateInArray = cachedStateLocations[chosenState];
                if (stateInArray == undefined) {
                    document.getElementById("output").innerHTML = ("Unrecognized state: " + chosenState);
                    return;
                }

                var allWeights = [];
                //Find the most efficient depot
                for (
                    var searchDepots = 0;
                    searchDepots < cachedDistances.length;
                    searchDepots++
                )
                    allWeights.push(
                        cachedDistances[searchDepots].distances[stateInArray].weight
                    );
                var fairObj_instance = new fairObj(stateInArray, allWeights, i);
                originalDepotList.push(fairObj_instance);
                for (var z = 0; z < availableDepots.length; z++)
                    depotSelectionHolder[z].push(fairObj_instance);
            }

            //Make the fair share amount and sort the depots
            var fairShare = Math.floor((1 / availableDepots.length) * list.length);
            for (var loc = 0; loc < availableDepots.length; loc++) {
                depotSelectionHolder[loc].sort(function (a, b) {
                    return a.weight[loc] - b.weight[loc];
                });
            }

            //Start splitting up the workload
            for (var depotAt = 0; depotAt < depotSelectionHolder.length; depotAt++) {
                for (var stateAt = 0; stateAt < fairShare; stateAt++) {
                    var depotStateAt = depotSelectionHolder[depotAt][stateAt];
                    if (depotStateAt.name == undefined) {
                        depotStateAt.name = cachedDistances[depotAt].name;
                        depotStateAt.chosenDepotArrayLoc = depotAt;
                    } else {
                        if (depotSelectionHolder[depotAt].length > fairShare) {
                            var otherDepot =
                                depotSelectionHolder[depotStateAt.chosenDepotArrayLoc];
                            var otherStateArrayLoc;
                            //Get the location of the other state
                            for (var k = 0; k < otherDepot.length; k++) {
                                if (otherDepot[k].uniqueId == depotStateAt.uniqueId) {
                                    otherStateArrayLoc = k;
                                    break;
                                }
                            }
                            var otherState = otherDepot[otherStateArrayLoc];
                            if (
                                otherDepot.length > fairShare &&
                                depotSelectionHolder[depotAt][fairShare].weight[depotAt] >
                                otherDepot[fairShare].weight[otherState.chosenDepotArrayLoc]
                            ) {
                                while (otherDepot.length > fairShare && otherDepot[fairShare].name != undefined)
                                    otherDepot.splice(fairShare, 1);

                                if (otherDepot.length > fairShare) {
                                    otherDepot[fairShare].name = otherState.name;
                                    otherDepot[fairShare].chosenDepotArrayLoc = otherState.chosenDepotArrayLoc;
                                    otherDepot.splice(otherStateArrayLoc, 1);
                                    depotStateAt.name = cachedDistances[depotAt].name;
                                    depotStateAt.chosenDepotArrayLoc = depotAt;
                                }
                            } else {
                                while (depotSelectionHolder[depotAt].length > fairShare && depotSelectionHolder[depotAt][fairShare].name != undefined)
                                    depotSelectionHolder[depotAt].splice(fairShare, 1);

                                if (depotSelectionHolder[depotAt].length > fairShare) {
                                    depotSelectionHolder[depotAt][fairShare].name = cachedDistances[depotAt].name;
                                    depotSelectionHolder[depotAt][fairShare].chosenDepotArrayLoc = depotAt;
                                    depotSelectionHolder[depotAt].splice(stateAt, 1);
                                    stateAt--;
                                }
                            }
                        } //Otherwise, ignore if depotStateAt is already reaching minimum
                    }
                }
            }

            var chosenDepot;
            //Assign out the count to the most efficient depot
            for (var j = 0; j < originalDepotList.length; j++) {
                chosenDepot = originalDepotList[j];
                if (chosenDepot.name == undefined) {
                    var min = Number.MAX_SAFE_INTEGER;
                    var minDepot;
                    for (var k = 0; k < availableDepots.length; k++) {
                        var weight = originalDepotList[j].weight[k];
                        if (weight < min) {
                            min = weight;
                            minDepot = k;
                        }
                    }
                    chosenDepot.name = availableDepots[minDepot];
                    chosenDepot.chosenDepotArrayLoc = minDepot;
                }
                depotList[chosenDepot.chosenDepotArrayLoc].assigned++;
                document.getElementById("output").innerHTML +=
                    depotList[chosenDepot.chosenDepotArrayLoc].name + "\n";
                totalWeight += chosenDepot.weight[chosenDepot.chosenDepotArrayLoc];
            }
            const factor = 0.621371;
            document.getElementById("totalShipping").innerHTML = "Approximated shipping mileage (in miles): " + ((totalWeight*factor).toFixed(0)) + "mi";
            document.getElementById("ftw").innerHTML = depotList[0].assigned;
            document.getElementById("oma").innerHTML = depotList[1].assigned;
            document.getElementById("gso").innerHTML = depotList[2].assigned;
        }

        function displayHelp() {
            alert(
                "This page is used for determining shipping locations based off of state abbreviations. There are two formats of addresses that are accepted. One is with just the state abbreviation alone, or as a full address. Both examples are displayed in the input text field. This is used as a bulk adder for calculating depot shipping locations. It uses a generalized algorithm that I made for calculating distances that values speed over actual distance calculation."
            );
            document.getElementById("input").value = "IN\n501 Virginia Ave, Hagerstown, MD 21740"
        }


    </script>
</body>
</html>
